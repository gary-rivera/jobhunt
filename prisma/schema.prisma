generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

model JobListing {
  id Int @id @default(autoincrement())
  externalEmployerId       String @map("external_employer_id")

  title             String
  company           String
  location          String
  listingUrl        String @map("listing_url") @db.Text
  applyToUrl        String @map("apply_to_url") @db.Text

  salaryMidpointUsd Int?    @map("salary_midpoint_usd")
  totalApplicants   Int?    @map("total_applicants")

  descriptionRaw       String  @map("description_raw") @db.Text
  descriptionCleaned   String  @map("description_cleaned") @db.Text
  descriptionEmbedding Float[] @map("description_embedding")

  score Float?

  postedAt DateTime? @map("posted_at")
  scrapedAt DateTime @map("scraped_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("job_listings")
}

model User {
  id           Int      @id @default(autoincrement())
  alias        String   @unique
  bio          String?
  bioEmbedding Float[]  @map("bio_embedding")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("users")
}

// enum JobScrapeRunStatus {
//   RUNNING
//   COMPLETED
//   FAILED
// }
// model JobScrapeRun {
//   id             String             @id @default(cuid())
//   startedAt      DateTime           @default(now())
//   completedAt    DateTime?
//   totalScraped   Int?
//   afterFiltering Int?
//   status         JobScrapeRunStatus @default(RUNNING)
//   errorMessage   String?
//   jobListings    JobListing[]

// }
